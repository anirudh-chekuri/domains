name: Trigger SQL Pipeline Update

on:
  push:
    branches: [main]
    paths:
      - 'domain_1/*.sql'

jobs:
  update-pipeline:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Load Configuration
      id: load_config
      run: |
        DOMAIN_ID=$(grep '^domainid=' domain_1/config.txt | cut -d '=' -f 2)
        HOST=$(grep '^host=' domain_1/config.txt | cut -d '=' -f 2)
        ENVIRONMENT_ID=$(grep '^environmentid=' domain_1/config.txt | cut -d '=' -f 2)
        echo "DOMAIN_ID=${DOMAIN_ID}" >> $GITHUB_ENV
        echo "HOST=${HOST}" >> $GITHUB_ENV
        echo "ENVIRONMENT_ID=${ENVIRONMENT_ID}" >> $GITHUB_ENV
        echo "Loaded configuration: DOMAIN_ID=${DOMAIN_ID}, HOST=${HOST}, ENVIRONMENT_ID=${ENVIRONMENT_ID}"

    - name: Fetch Token
      id: fetch_token
      run: |
        TOKEN_RESPONSE=$(curl -k --silent --location "https://${{ env.HOST }}/v3/security/token/access" \
          --header "Authorization: Basic ${{ secrets.REFRESH_TOKEN }}" || { echo "Token fetch failed"; exit 1; })
        echo "Token API Response: $TOKEN_RESPONSE"
        TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.result.authentication_token' || { echo "Token extraction failed"; exit 1; })
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV
        echo "Fetched authentication token."

    - name: Determine Commit Range
      id: determine_commits
      run: |
        firstCommit="${{ github.event.before }}"
        lastCommit="${{ github.sha }}"
        echo "FIRST_COMMIT=${firstCommit}" >> $GITHUB_ENV
        echo "LAST_COMMIT=${lastCommit}" >> $GITHUB_ENV
        echo "Determined commit range: ${firstCommit}..${lastCommit}"

    - name: Get the list of changed SQL files
      id: changed_files
      run: |
        git fetch origin
        changed_files=$(git diff --name-only --diff-filter=d "${FIRST_COMMIT}" "${LAST_COMMIT}" | grep '^domain_1/.*\.sql$' || true)
        changed_files_formatted=$(echo "$changed_files" | tr '\n' ' ')
        echo "CHANGED_FILES=$changed_files_formatted" >> $GITHUB_ENV
        echo "Detected changed files: $changed_files"        

    - name: Fetch Pipeline IDs
      id: fetch_pipeline_ids
      run: |
        pipelines=$(curl -k --location "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines" \
          --header "Authorization: Bearer ${{ env.TOKEN }}" || { echo "Pipeline fetch failed"; exit 1; })
        echo "$pipelines" | jq -r '.result[] | "\(.name) \(.id)"' > pipelines.txt
        echo "Fetched and stored pipeline IDs:"
        cat pipelines.txt

    - name: Process SQL files and pipelines
      id: process_files
      run: |
        declare -a created_pipelines=()
        declare -a updated_pipelines=()
        declare -a missing_pipelines=()

        for file in ${{ env.CHANGED_FILES }}; do
          base_filename=$(basename "$file")
          pipeline_name="${base_filename%.sql}"
          pipeline_id=$(grep -w "$pipeline_name" pipelines.txt | awk '{print $2}')

          if [ -n "$pipeline_id" ] && [ "$pipeline_id" != "null" ]; then
            echo "Updating pipeline '$pipeline_name' (ID: $pipeline_id) with contents of '$file'."
            query=$(cat $file | base64 | tr -d '\n')
            payload="{\"pipeline_id\": \"$pipeline_id\", \"type\": \"sql\", \"query\": \"$query\"}"
            echo "Payload for update: $payload"

            create_response=$(curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions" \
              --header "Content-Type: application/json" \
              --header "Authorization: Bearer ${{ env.TOKEN }}" \
              --data "$payload")
            echo "Pipeline update response: $create_response"

            pipeline_version_id=$(echo $create_response | jq -r '.result.id')
            if [ -n "$pipeline_version_id" ] && [ "$pipeline_version_id" != "null" ]; then
              curl -k --request POST \
                --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions/$pipeline_version_id/set-active" \
                --header "Authorization: Bearer ${{ env.TOKEN }}"
              echo "Set pipeline '$pipeline_name' (ID: $pipeline_id) version '$pipeline_version_id' as active."
              updated_pipelines+=("$pipeline_name ($pipeline_id)")
            else
              echo "Failed to extract version ID for '$pipeline_name' (ID: $pipeline_id)."
            fi
          else
            echo "Pipeline '$pipeline_name' not found. Creating a new pipeline."

            create_response=$(curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines" \
              --header "Content-Type: application/json" \
              --header "Authorization: Bearer ${{ env.TOKEN }}" \
              --data "{\"name\": \"$pipeline_name\", \"domain_id\": \"${{ env.DOMAIN_ID }}\", \"environment_id\": \"${{ env.ENVIRONMENT_ID }}\", \"run_job_on_data_plane\": false}")

            echo "Pipeline creation response: $create_response"
            new_pipeline_id=$(echo $create_response | jq -r '.result.id')

            if [ -n "$new_pipeline_id" ] && [ "$new_pipeline_id" != "null" ]; then
              echo "Created new pipeline '$pipeline_name' (ID: $new_pipeline_id)."
              created_pipelines+=("$pipeline_name ($new_pipeline_id)")

              query=$(cat $file | base64 | tr -d '\n')
              payload="{\"pipeline_id\": \"$new_pipeline_id\", \"type\": \"sql\", \"query\": \"$query\"}"
              echo "Payload for new pipeline version: $payload"

              version_response=$(curl -k --request POST \
                --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$new_pipeline_id/versions" \
                --header "Content-Type: application/json" \
                --header "Authorization: Bearer ${{ env.TOKEN }}" \
                --data "$payload")
              echo "Pipeline version creation response: $version_response"

              new_version_id=$(echo $version_response | jq -r '.result.id')
              if [ -n "$new_version_id" ] && [ "$new_version_id" != "null" ]; then
                curl -k --request POST \
                  --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$new_pipeline_id/versions/$new_version_id/set-active" \
                  --header "Authorization: Bearer ${{ env.TOKEN }}"
                echo "Set new pipeline '$pipeline_name' (ID: $new_pipeline_id) version '$new_version_id' as active."
              else
                echo "Failed to extract version ID for new pipeline '$pipeline_name' (ID: $new_pipeline_id)."
              fi
            else
              echo "Pipeline creation failed for '$pipeline_name'."
            fi
          fi
        done

        # Identify pipelines without corresponding SQL files
        while IFS= read -r line; do
          pipeline_name=$(echo "$line" | awk '{print $1}')
          pipeline_id=$(echo "$line" | awk '{print $2}')
          if ! grep -q "$pipeline_name.sql" <<< "${{ env.CHANGED_FILES }}"; then
            missing_pipelines+=("$pipeline_name ($pipeline_id)")
          fi
        done < pipelines.txt

        echo "Processing completed."
        echo "==================== Summary ===================="
        if [ "${#updated_pipelines[@]}" -gt 0 ]; then
          echo "Updated pipelines: ${#updated_pipelines[@]}"
          for pipeline in "${updated_pipelines[@]}"; do
            echo "  - $pipeline"
          done
        else
          echo "No pipelines updated."
        fi

        if [ "${#created_pipelines[@]}" -gt 0 ]; then
          echo "Newly created pipelines: ${#created_pipelines[@]}"
          for pipeline in "${created_pipelines[@]}"; do
            echo "  - $pipeline"
          done
        else
          echo "No new pipelines created."
        fi
        
        echo "================================================="
