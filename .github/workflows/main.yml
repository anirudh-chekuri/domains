name: Trigger SQL Pipeline Update

on:
  push:
    branches: [ main ]
    paths:
      - 'domain_1/**'

jobs:
  get_files:
    name: run_on_push
    runs-on: ubuntu-latest
    outputs:
      sql_files: ${{ steps.get_files.outputs.sql_files }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Determine changed SQL files
      id: get_files
      run: |
        # Fetch changes between commits
        changedFiles=$(git diff --name-only --diff-filter=d HEAD~1 HEAD)
        
        # Filter for SQL files under domain_1/
        sqlFiles=$(echo "$changedFiles" | grep '^domain_1/.*\.sql$' || true)
        
        # Set output and environment variable
        echo "sql_files=${sqlFiles}" >> $GITHUB_ENV
        echo "::set-output name=sql_files::${sqlFiles}"

  update-pipeline:
    runs-on: ubuntu-latest
    needs: get_files
    if: ${{ env.sql_files != '' }}
    steps:
    - name: Load Configuration
      run: |
        DOMAIN_ID=$(grep '^domainid=' domain_1/config.txt | cut -d '=' -f 2)
        HOST=$(grep '^host=' domain_1/config.txt | cut -d '=' -f 2)
        echo "DOMAIN_ID=${DOMAIN_ID}" >> $GITHUB_ENV
        echo "HOST=${HOST}" >> $GITHUB_ENV

    - name: Fetch token
      run: |
        TOKEN_RESPONSE=$(curl -k --silent --location "https://${{ env.HOST }}/v3/security/token/access" \
          --header "Authorization: Basic ${{ secrets.REFRESH_TOKEN }}")
        
        # Extract the token
        TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.result.authentication_token')
        echo "TOKEN=${TOKEN}" >> $GITHUB_ENV

    - name: Fetch Pipeline IDs
      run: |
        pipelines=$(curl -k --location "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines" \
          --header "Authorization: Bearer ${{ env.TOKEN }}" | jq -r '.result[] | {id: .id, name: .name}')
        echo "$pipelines" > pipelines.json

    - name: Process Changed Files
      run: |
        for file in ${{ env.sql_files }}; do
          pipeline_name=$(basename "$file" .sql)
          pipeline_id=$(jq -r --arg name "$pipeline_name" '.[] | select(.name == $name) | .id' pipelines.json)
          
          if [ "$pipeline_id" != "null" ]; then
            query=$(base64 < "$file")
            create_response=$(curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions" \
              --header "Content-Type: application/json" \
              --header "Authorization: Bearer ${{ env.TOKEN }}" \
              --data "{\"pipeline_id\": \"$pipeline_id\", \"type\": \"sql\", \"query\": \"$query\"}")
            
            pipeline_version_id=$(echo $create_response | jq -r '.result.id')
            
            curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions/$pipeline_version_id/set-active" \
              --header "Authorization: Bearer ${{ env.TOKEN }}"
          else
            echo "Pipeline ID not found for $pipeline_name"
          fi
        done
