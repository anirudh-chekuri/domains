name: Trigger SQL Pipeline Update

on:
  push:
    paths:
      - 'domain_1/**'

jobs:
  update-pipeline:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v34
      with:
        files: |
          domain_1/*.sql

    - name: Load Configuration
      id: load_config
      run: |
        DOMAIN_ID=$(grep '^domainid=' domain_1/config.txt | cut -d '=' -f 2)
        HOST=$(grep '^host=' domain_1/config.txt | cut -d '=' -f 2)
        echo "DOMAIN_ID=${DOMAIN_ID}" >> $GITHUB_ENV
        echo "HOST=${HOST}" >> $GITHUB_ENV

    - name: Fetch token
      id: fetch_token
      run: |
        TOKEN_RESPONSE=$(curl -k --silent --location "https://${{ env.HOST }}/v3/security/token/access" \
          --header "Authorization: Basic ${{ secrets.REFRESH_TOKEN }}")
        
        echo "Token API Response: $TOKEN_RESPONSE"
        TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.result.authentication_token')
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Fetch Pipeline IDs
      id: fetch_pipeline_ids
      run: |
        pipelines=$(curl -k --location "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines" \
          --header "Authorization: Bearer ${{ env.TOKEN }}" | jq -r '.result[] | {id: .id, name: .name}')
        echo "Fetched Pipelines:"
        echo "$pipelines" > pipelines.json
        cat pipelines.json

    - name: Process Existing Changed Files
      if: ${{ steps.changed-files.outputs.changed }}
      run: |
        set -e
        for file in ${{ steps.changed-files.outputs.files }}; do
          pipeline_name=$(basename "$file" .sql)
          echo "Processing file: $file"
          echo "Extracted pipeline name: $pipeline_name"

          pipeline_id=$(jq -r --arg name "$pipeline_name" '.[] | select(.name == $name) | .id' pipelines.json)
          echo "Pipeline ID: $pipeline_id"

          if [ "$pipeline_id" != "null" ]; then
            echo "Found pipeline ID for $pipeline_name: $pipeline_id"
            query=$(base64 < "$file")
            create_response=$(curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions" \
              --header "Content-Type: application/json" \
              --header "Authorization: Bearer ${{ env.TOKEN }}" \
              --data "{\"pipeline_id\": \"$pipeline_id\", \"type\": \"sql\", \"query\": \"$query\"}")

            echo "Create response: $create_response"
            pipeline_version_id=$(echo $create_response | jq -r '.result.id')
            echo "Pipeline Version ID: $pipeline_version_id"

            if [ -z "$pipeline_version_id" ] || [ "$pipeline_version_id" == "null" ]; then
              echo "Error: Failed to create a new pipeline version for $pipeline_name."
              exit 1
            fi

            activation_response=$(curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions/$pipeline_version_id/set-active" \
              --header "Authorization: Bearer ${{ env.TOKEN }}")
            echo "Activation response: $activation_response"

            if ! echo "$activation_response" | grep -q "success"; then
              echo "Error: Failed to activate the pipeline version $pipeline_version_id for $pipeline_name."
              exit 1
            fi
          else
            echo "Pipeline ID not found for $pipeline_name"
          fi
        done
