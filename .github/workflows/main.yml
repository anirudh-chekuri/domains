name: Create and Activate Pipeline Version

on:
  push:
    paths:
      - 'domain_1/**'

jobs:
  trigger_pipeline:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Read Configuration
      id: read_config
      run: |
        if [ -f domain_1/config.txt ]; then
          domain_id=$(grep 'domainid=' domain_1/config.txt | cut -d'=' -f2)
          host=$(grep 'host=' domain_1/config.txt| cut -d'=' -f2)
          echo "DOMAIN_ID=$domain_id" >> $GITHUB_ENV
          echo "HOST=$host" >> $GITHUB_ENV
        else
          echo "Configuration file not found!"
          exit 1
        fi

    - name: Determine Changed SQL Files
      id: changed_files
      run: |
        git fetch origin
        changed_files=$(git diff --name-only HEAD^ HEAD | grep '^domain_1/[^/]*$')
        echo "CHANGED_FILES=$changed_files" >> $GITHUB_ENV

    - name: Get Authentication Token
      id: auth
      env:
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
      run: |
        response=$(curl -k --location "https://${{ env.HOST }}/v3/security/authenticate" \
          --header "Authorization: Basic $REFRESH_TOKEN")
        token=$(echo $response | jq -r '.result.authentication_token')
        echo "TOKEN=$token" >> $GITHUB_ENV

    - name: Fetch Pipeline IDs
      id: fetch_pipeline_ids
      env:
        TOKEN: ${{ env.TOKEN }}
      run: |
        response=$(curl -k --location "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines" \
          --header "Authorization: Bearer $TOKEN")
        echo "API Response: $response"
        pipelines=$(echo "$response" | jq -r '.result[] | "\(.id):\(.name)"')
        echo "PIPELINE_IDS=$pipelines" >> $GITHUB_ENV

    - name: Create and Activate New Pipeline Versions
      if: ${{ env.CHANGED_FILES }}
      run: |
        IFS=$'\n'
        for file in ${{ env.CHANGED_FILES }}; do
          pipeline_name=$(basename $file)
          pipeline_id=$(echo "${{ env.PIPELINE_IDS }}" | grep -w "$pipeline_name" | cut -d':' -f1)
          if [ -n "$pipeline_id" ]; then
            sql_query=$(cat $file | base64 | tr -d '\n')
            create_response=$(curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions" \
              --header "Content-Type: application/json" \
              --header "Authorization: Bearer ${{ env.TOKEN }}" \
              --data '{
                "pipeline_id": "'"$pipeline_id"'",
                "type": "sql",
                "query": "'"$sql_query"'"
              }')
            version_id=$(echo "$create_response" | jq -r '.result.id')
            echo "Created version $version_id for pipeline $pipeline_name"
            
            activate_response=$(curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions/$version_id/set-active" \
              --header "Authorization: Bearer ${{ env.TOKEN }}")
            echo "Activated version $version_id for pipeline $pipeline_name"
          else
            echo "Pipeline ID not found for $pipeline_name"
          fi
        done



