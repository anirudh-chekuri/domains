name: Create and Activate Pipeline Version

on:
  push:
    paths:
      - 'domain_1/**'

jobs:
  trigger_pipeline:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2  # Ensure at least 2 commits are fetched

    - name: Read Configuration
      id: read_config
      run: |
        if [ -f domain_1/config.txt ]; then
          domain_id=$(grep 'domainid=' domain_1/config.txt | cut -d'=' -f2)
          host=$(grep 'host=' domain_1/config.txt | cut -d'=' -f2)
          echo "DOMAIN_ID=$domain_id" >> $GITHUB_ENV
          echo "HOST=$host" >> $GITHUB_ENV
        else
          echo "Configuration file not found!"
          exit 1
        fi

    - name: Get Authentication Token
      id: auth
      run: |
        response=$(curl -k --location "https://${{ env.HOST }}/v3/security/authenticate" \
          --header 'Authorization: Basic ${{ secrets.REFRESH_TOKEN }}')
        echo "TOKEN=$(echo $response | jq -r '.result.authentication_token')" >> $GITHUB_ENV

    - name: Fetch Pipeline IDs
      id: fetch_pipeline_ids
      run: |
        pipelines=$(curl -k --location "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines" \
          --header "Authorization: Bearer ${{ env.TOKEN }}" | jq -r '.result[] | {id: .id, name: .name}')
        echo "$pipelines" > pipelines.json

    - name: Determine Changed Files
      id: changed_files
      run: |
        git fetch origin
        latest_commit=$(git rev-parse HEAD)
        previous_commit=$(git rev-parse HEAD^ || echo "no_previous_commit")
        if [ "$previous_commit" != "no_previous_commit" ]; then
          changed_files=$(git diff --name-only $previous_commit $latest_commit | grep '^domain_1/' | grep -v '^domain_1/config.json$')
        else
          changed_files=""
        fi
        echo "CHANGED_FILES=$changed_files" >> $GITHUB_ENV

    - name: Create and Activate Pipeline Versions
      run: |
        for file in $CHANGED_FILES; do
          # Extract pipeline name from the file path
          pipeline_name=$(basename "$file")
          
          # Map pipeline names to IDs
          pipeline_id=$(jq -r --arg name "$pipeline_name" '.[] | select(.name == $name) | .id' pipelines.json)
          if [ "$pipeline_id" != "null" ]; then
            query=$(base64 < "$file")
            create_response=$(curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions" \
              --header "Content-Type: application/json" \
              --header "Authorization: Bearer ${{ env.TOKEN }}" \
              --data "{\"pipeline_id\": \"$pipeline_id\", \"type\": \"sql\", \"query\": \"$query\"}")
            pipeline_version_id=$(echo $create_response | jq -r '.result.id')
            curl -k --request POST \
              --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$pipeline_id/versions/$pipeline_version_id/set-active" \
              --header "Authorization: Bearer ${{ env.TOKEN }}"
          fi
        done


