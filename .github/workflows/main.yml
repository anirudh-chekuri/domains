name: Trigger SQL Pipeline Update

on:
  push:
    paths:
      - 'domain_1/**'

jobs:
  update-pipeline:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Load Configuration
      id: load_config
      run: |
        DOMAIN_ID=$(grep '^domainid=' domain_1/config.txt | cut -d '=' -f 2)
        HOST=$(grep '^host=' domain_1/config.txt | cut -d '=' -f 2)
        echo "DOMAIN_ID=${DOMAIN_ID}" >> $GITHUB_ENV
        echo "HOST=${HOST}" >> $GITHUB_ENV

    - name: Determine Changed SQL Files
      id: changed_files
      run: |
        git fetch origin
        changed_files=$(git diff --name-only --diff-filter=M HEAD^ HEAD domain_1/ | grep '\.sql$')
        echo "CHANGED_FILES=$changed_files" >> $GITHUB_ENV

    - name: Get Authentication Token
      id: get_token
      run: |
        TOKEN=$(curl --location "https://${{ env.HOST }}/v3/security/authenticate" \
          --header "Authorization: Basic ${{ secrets.REFRESH_TOKEN }}" | jq -r '.result.authentication_token')
        echo "TOKEN=${TOKEN}" >> $GITHUB_ENV
      env:
        REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}

    - name: Get Pipeline IDs
      id: get_pipelines
      run: |
        response=$(curl -k --location "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines" \
          --header "Authorization: Bearer ${{ env.TOKEN }}")
        echo "API Response: $response"
        pipelines=$(echo $response | jq -r '.result[] | select(.name | inside("${CHANGED_FILES}")) | "\(.name)=\(.id)"')
        echo "PIPELINES=${pipelines}" >> $GITHUB_ENV

    - name: Create New Pipeline Versions
      run: |
        for pipeline in ${{ env.PIPELINES }}; do
          name=$(echo $pipeline | cut -d '=' -f 1)
          id=$(echo $pipeline | cut -d '=' -f 2)
          query=$(base64 < "domain_1/$name")
          response=$(curl -k --request POST \
            --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$id/versions" \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer ${{ env.TOKEN }}" \
            --data "{\"pipeline_id\":\"$id\",\"type\":\"sql\",\"query\":\"$query\"}")
          version_id=$(echo $response | jq -r '.result.id')
          echo "Created version $version_id for pipeline $name"

          # Set the newly created version as active
          curl -k --request POST \
            --url "https://${{ env.HOST }}/v3/domains/${{ env.DOMAIN_ID }}/pipelines/$id/versions/$version_id/set-active" \
            --header "Authorization: Bearer ${{ env.TOKEN }}"
          echo "Set version $version_id as active for pipeline $name"
        done
