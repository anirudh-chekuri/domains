name: Trigger SQL Pipeline Update

on:
  push:
    paths:
      - 'domain_1/*.sql'

jobs:
  update-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load Configuration
        id: load_config
        run: |
          DOMAIN_ID=$(grep '^domainid=' domain_1/config.txt | cut -d '=' -f 2)
          HOST=$(grep '^host=' domain_1/config.txt | cut -d '=' -f 2)
          echo "DOMAIN_ID=${DOMAIN_ID}" >> $GITHUB_ENV
          echo "HOST=${HOST}" >> $GITHUB_ENV

      - name: Fetch token
        id: fetch_token
        run: |
          TOKEN_RESPONSE=$(curl -k --silent --location "https://${{ env.HOST }}/v3/security/token/access" \
            --header "Authorization: Basic ${{ secrets.REFRESH_TOKEN }}")
          
          echo "Token API Response: $TOKEN_RESPONSE"
          TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.result.authentication_token')
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Debug Commit History
        run: |
          echo "Git log (last 10 commits):"
          git log --oneline -n 10
          echo "Total number of commits: $(git rev-list --count HEAD)"

      - name: Get the list of changed SQL files
        id: changed_files
        run: |
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            echo "Fetching changes between commits"
            git diff --name-only HEAD~1 HEAD > changed_files.txt

            echo "Changed files between HEAD~1 and HEAD:"
            cat changed_files.txt

            changed_files=$(grep '^domain_1/.*\.sql$' changed_files.txt || true)
            echo "Filtered SQL files:"
            echo "$changed_files"

            existing_files=""
            echo "Files in previous commit (HEAD~1):"
            git ls-tree --name-only HEAD~1

            for file in $changed_files; do
              echo "Checking if $file existed in previous commit"
              if git ls-tree --name-only HEAD~1 | grep -q "^${file}"; then
                existing_files+="${file} "
              else
                echo "File $file did not exist in the previous commit."
              fi
            done

            echo "Existing changed files: ${existing_files}"
            echo "EXISTING_CHANGED_FILES=${existing_files}" >> $GITHUB_ENV
          else
            echo "Only one commit found. No previous commit to compare with."
            echo "EXISTING_CHANGED_FILES=" >> $GITHUB_ENV
          fi
          echo "Final list of existing changed files: ${existing_files}"
