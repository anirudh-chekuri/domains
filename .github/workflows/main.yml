name: Trigger SQL Pipeline Update

on:
  push:
    paths:
      - 'domain_1/*.sql'

jobs:
  update-pipeline:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Load Configuration
      id: load_config
      run: |
        DOMAIN_ID=$(grep '^domainid=' domain_1/config.txt | cut -d '=' -f 2)
        HOST=$(grep '^host=' domain_1/config.txt | cut -d '=' -f 2)
        echo "DOMAIN_ID=${DOMAIN_ID}" >> $GITHUB_ENV
        echo "HOST=${HOST}" >> $GITHUB_ENV
        
    - name: Fetch token
      id: fetch_token
      run: |
        TOKEN_RESPONSE=$(curl -k --silent --location "https://${{ env.HOST }}/v3/security/token/access" \
          --header "Authorization: Basic ${{ secrets.REFRESH_TOKEN }}")
        
        # Print the full response for debugging
        echo "Token API Response: $TOKEN_RESPONSE"
        
        # Extract the token
        TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.result.authentication_token')
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Get the list of changed SQL files
      id: changed_files
      run: |
        git fetch origin
        
        # Get the latest commit hash
        LATEST_COMMIT=$(git log -1 --format="%H")
        
        # Get the changed SQL files in the latest commit
        git diff-tree --no-commit-id --name-only -r $LATEST_COMMIT | grep '^domain_1/[^/]*\.sql$' > changed_files.txt
        
        echo "Changed SQL files:"
        cat changed_files.txt
        
        # Initialize a variable to track existing SQL files
        existing_files=""
        
        for file in $(cat changed_files.txt); do
          existing_files+="${file} "
        done
        
        echo "EXISTING_CHANGED_FILES=${existing_files}" >> $GITHUB_ENV
        echo $existing_files
